{"version":3,"sources":["actions/index.js","TodoList.js","App.js","reducers/reducer.js","reducers/index.js","sagas/requests/todoData.js","sagas/handlers/todoData.js","sagas/rootSaga.js","store.js","serviceWorker.js","index.js"],"names":["setData","data","type","TodoList","useState","sort","setsort","dispatch","useDispatch","inputRefTitle","useRef","inputRefDes","myState","useSelector","state","todoDataReducer","sourceElement","sortedList","setSortedList","useEffect","forEach","v","s","t","item","i","status","unshift","push","todoSort","newLine","current","value","newData","createdAt","Date","toString","taskDescription","taskTitle","post","concat","handleDragStart","event","target","style","opacity","dataTransfer","effectAllowed","handleDragOver","preventDefault","dropEffect","handleDragEnter","classList","add","handleDragLeave","remove","handleDrop","stopPropagation","list","filter","id","removed","insertAt","Number","tempList","length","slice","newList","console","log","handleDragEnd","strikeThrough","text","split","map","char","join","newdata","a","fetch","method","headers","body","JSON","stringify","res","className","color","textAlign","fontWeight","htmlFor","ref","onClick","e","put","draggable","onDragStart","onDragOver","onDragEnter","onDragLeave","onDrop","onDragEnd","handleDelete","removedata","App","action","rootReducer","combineReducers","requestGetData","axios","request","url","handleGetData","call","response","watcherSaga","takeLatest","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAKaA,EAAU,SAACC,GACtB,MAAO,CACLC,KAAM,WACND,KAAKA,I,uCCJM,SAASE,IAAY,IAAD,EACTC,mBAAS,IADA,mBAC1BC,EAD0B,KACpBC,EADoB,KAE3BC,EAAWC,cACXC,EAAgBC,iBAAO,MACvBC,EAAcD,iBAAO,MACrBE,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMC,mBAGzCC,EAAgB,KARa,EAUGZ,mBAAS,IAVZ,mBAU1Ba,EAV0B,KAUdC,EAVc,KAWjCC,qBAAU,WACRP,EAAQQ,SAAQ,SAACC,GACfH,EAAcG,QAEf,CAACT,IAGJO,qBAAU,YAoLV,SAAkBG,GAChB,OAAQA,GACN,IAAK,MAED,IAAMC,EAAI,GACVX,EAAQQ,SAAQ,SAACI,GACfA,EAAKJ,SAAQ,SAACK,IACK,IAAbA,EAAEC,OACJH,EAAEI,QAAQF,GAEVF,EAAEK,KAAKH,SAIbP,EAAcK,GAGhB,MACF,IAAK,YAED,IAAMA,EAAI,GACVX,EAAQQ,SAAQ,SAACI,GACfA,EAAKJ,SAAQ,SAACK,IACK,IAAbA,EAAEC,QACJH,EAAEK,KAAKH,SAIbP,EAAcK,GAGhB,MACF,IAAK,cAED,IAAMA,EAAI,GACVX,EAAQQ,SAAQ,SAACI,GACfA,EAAKJ,SAAQ,SAACK,IACK,IAAbA,EAAEC,QACJH,EAAEK,KAAKH,SAIbP,EAAcK,IA7NpBM,CAASxB,KACT,CAACA,IAGH,IAAMyB,EAAU,WACd,GACkC,KAAhCrB,EAAcsB,QAAQC,OACQ,KAA9BrB,EAAYoB,QAAQC,MACpB,CAEA,IAAIC,EAAU,CACZC,WAAW,IAAIC,MAAOC,WACtBC,gBAAiB5B,EAAcsB,QAAQC,MACvCM,UAAW3B,EAAYoB,QAAQC,MAC/BN,QAAQ,IAjCmB,oCAmC7Ba,CAAKN,GACLf,EAAcD,EAAWuB,OAAOP,IAChCxB,EAAcsB,QAAQC,MAAQ,GAC9BrB,EAAYoB,QAAQC,MAAQ,KAM1BS,EAAkB,SAACC,GACvBA,EAAMC,OAAOC,MAAMC,QAAU,GAC7B7B,EAAgB0B,EAAMC,OACtBD,EAAMI,aAAaC,cAAgB,QAI/BC,EAAiB,SAACN,GACtBA,EAAMO,iBACNP,EAAMI,aAAaI,WAAa,QAI5BC,EAAkB,SAACT,GACvBA,EAAMC,OAAOS,UAAUC,IAAI,SAIvBC,EAAkB,SAACZ,GACvBA,EAAMC,OAAOS,UAAUG,OAAO,SAG1BC,EAAa,SAACd,GAMlB,GAJAA,EAAMe,kBAIFzC,IAAkB0B,EAAMC,OAAQ,CAElC,IAAMe,EAAOzC,EAAW0C,QACtB,SAACnC,EAAMC,GAAP,OAAaA,EAAEW,aAAepB,EAAc4C,MAIxCC,EAAU5C,EAAW0C,QACzB,SAACnC,EAAMC,GAAP,OAAaA,EAAEW,aAAepB,EAAc4C,MAC5C,GAGEE,EAAWC,OAAOrB,EAAMC,OAAOiB,IAM/BI,EAAW,GAIf,GAAIF,GAAYJ,EAAKO,OACnBD,EAAWN,EAAKQ,MAAM,GAAG1B,OAAOqB,GAChC3C,EAAc8C,GACdtB,EAAMC,OAAOS,UAAUG,OAAO,aACzB,GAAIO,EAAWJ,EAAKO,OAAQ,CAQjC,IAAME,GANNH,EAAWN,EAAKQ,MAAM,EAAGJ,GAAUtB,OAAOqB,IAMjBrB,OAAOkB,EAAKQ,MAAMJ,IAI3C5C,EAAciD,GACdzB,EAAMC,OAAOS,UAAUG,OAAO,cAG3Ba,QAAQC,IAAI,oBACnB3B,EAAMC,OAAOS,UAAUG,OAAO,SAG1Be,EAAgB,SAAC5B,GACrBA,EAAMC,OAAOC,MAAMC,QAAU,GAuB/B,SAAS0B,EAAcC,GACrB,OAAOA,EACJC,MAAM,IACNC,KAAI,SAACC,GAAD,OAAUA,EAAO,YACrBC,KAAK,IAlJuB,4CAqJjC,WAAoBC,GAApB,eAAAC,EAAA,+EAEoBC,MACd,0DACA,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAT7B,OAEQQ,EAFR,OAYI9E,EDpKG,CACLL,KAAM,aCoKJkE,QAAQC,IAAIgB,GAbhB,gDAeIjB,QAAQC,IAAR,MAfJ,0DArJiC,kEAuKjC,WAAmBQ,EAASjB,GAA5B,eAAAkB,EAAA,+EAEoBC,MACd,2DAA6DnB,EAC7D,CACEoB,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAE1D,OAAQmD,MATvC,OAEQQ,EAFR,OAYIjB,QAAQC,IAAIgB,GAZhB,gDAcIjB,QAAQC,IAAR,MAdJ,0DAvKiC,kEAwLjC,WAA0BT,GAA1B,eAAAkB,EAAA,+EAEoBC,MACd,2DAA6DnB,EAC7D,CACEoB,OAAQ,WALhB,OAEQK,EAFR,OAQIjB,QAAQC,IAAIgB,GARhB,gDAUIjB,QAAQC,IAAR,MAVJ,0DAxLiC,sBAiTjC,OACE,sBAAKiB,UAAU,YAAf,UACE,oBAAI1C,MAAO,CAAE2C,MAAO,QAASC,UAAW,UAAxC,uBACA,sBAAK5B,GAAG,WAAW0B,UAAU,aAA7B,UACE,uBACE1C,MAAO,CAAE2C,MAAO,QAASE,WAAY,UACrCC,QAAQ,wBAFV,uBAMA,uBACExF,KAAK,OACLoF,UAAU,eACV1B,GAAG,wBACH+B,IAAKlF,IAEP,uBACEmC,MAAO,CAAE2C,MAAO,QAASE,WAAY,UACrCC,QAAQ,wBAFV,6BAMA,uBACExF,KAAK,OACLoF,UAAU,eACV1B,GAAG,wBACH+B,IAAKhF,IAEP,wBACEiD,GAAG,YACH0B,UAAU,YACVM,QAAS,WACP9D,KAJJ,oBAUF,yBAAQ8B,GAAG,OAAOgC,QAAS,SAACC,GAAD,OAAOvF,EAAQuF,EAAElD,OAAOX,QAAnD,UACE,wBAAQ4B,GAAG,IAAI5B,MAAM,MAArB,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,4BAhGGf,EAAWyD,KAAI,SAAClD,EAAMC,GAAP,OACpB,sBAAa6D,UAAU,YAAvB,UACE,uBACEA,UAAU,QACVpF,KAAK,QACL8B,MAAOR,EAAKE,OACZkE,QAAS,WACPpE,EAAKE,QAAS,EAjQS,sCAkQvBoE,EAAI,EAAOtE,EAAKoC,IAChBW,EAAc/C,EAAKa,iBACnB9B,EAASP,EAAQiB,OAGrB,oBACE2C,GAAInC,EACJvB,KAAK,OACLoF,UAAU,aACVS,UAAU,OACVC,YAAavD,EACbwD,WAAYjD,EACZkD,YAAa/C,EACbgD,YAAa7C,EACb8C,OAAQ5C,EACR6C,UAAW/B,EAEXtC,MAAOR,EAAKa,gBAZd,UAewB,IAAhBb,EAAKE,OACA6C,EACL/C,EAAKa,gBAAkB,OAASb,EAAKc,WAGhCd,EAAKa,gBAAkB,OAASb,EAAKc,YAKlD,qBACEsB,GAAInC,EACJ6D,UAAU,YACVM,QAAS,SAACC,IA5JG,SAACnD,GACpBA,EAAMO,iBACN,IAAMS,EAAOzC,EAAW0C,QAAO,SAACnC,EAAMC,GAAP,OAAaA,IAAMsC,OAAOrB,EAAMC,OAAOiB,OAEtE1C,EAAcwC,GAyJN4C,CAAaT,GApSU,oCAqSvBU,CAAW/E,EAAKoC,KALpB,iBArCQnC,S,MC1OD+E,MAff,WACE,IAAMjG,EAAWC,cAOjB,OANAW,qBAAU,WACRZ,EFRK,CACLL,KAAM,eEQL,CAACK,IAKF,qBAAK+E,UAAU,MAAf,SACE,cAACnF,EAAD,OCJWY,EAZO,WAAyB,IAAxBD,EAAuB,uDAAf,GAAI2F,EAAW,uCAC5C,OAAQA,EAAOvG,MACb,IAAK,WACH,MAAO,CAACuG,EAAOxG,MAEf,IAAK,WAGP,QACE,OAAOa,I,OCNA4F,EADKC,YAAgB,CAAC5F,oB,yCCD9B,SAAS6F,IACZ,OAAOC,IAAMC,QAAQ,CACjB9B,OAAQ,MACR+B,IAAI,4D,eCDKC,GAAV,SAAUA,EAAcP,GAAxB,yEAEc,OAFd,kBAEoBQ,YAAKL,GAFzB,OAKH,OAHMM,EAFH,OAGGjH,EAAOiH,EAHV,SAKGpB,YAAI9F,EAAQC,EAAKA,OALpB,uDAOHmE,QAAQC,IAAR,MAPG,qD,eCDU8C,GAAV,SAAUA,IAAV,iEACH,OADG,SACGC,YAAW,WAAWJ,GADzB,uCCGP,IAAMK,EAAiBC,cACjBC,EAAW,CAACF,GACZG,EAAQC,YAAYf,EAAa,GAAIgB,IAAe,WAAf,EAAmBH,IAC9DF,EAAeM,IAAIR,GACJK,QCGKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.0a4ce920.chunk.js","sourcesContent":["export const getData = () => {\n  return {\n    type: \"GET_DATA\",\n  };\n};\nexport const setData = (data) => {\n  return {\n    type: \"SET_DATA\",\n    data:data,\n  };\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { setData, getData } from \"./actions\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nexport default function TodoList() {\n  const [sort, setsort] = useState(\"\");\n  const dispatch = useDispatch();\n  const inputRefTitle = useRef(null);\n  const inputRefDes = useRef(null);\n  const myState = useSelector((state) => state.todoDataReducer);\n\n  // let list = [1,2,3,4,5,6,7,'']\n  let sourceElement = null;\n\n  const [sortedList, setSortedList] = useState([]);\n  useEffect(() => {\n    myState.forEach((v) => {\n      setSortedList(v);\n    });\n  }, [myState]);\n\n  // sorting\n  useEffect(() => {\n    todoSort(sort);\n  },[sort]);\n\n  /* add a new entry at the end of the list.  */\n  const newLine = () => {\n    if (\n      inputRefTitle.current.value !== \"\" &&\n      inputRefDes.current.value !== \"\"\n    ) {\n      // console.log(sortedList);\n      let newData = {\n        createdAt: new Date().toString(),\n        taskDescription: inputRefTitle.current.value,\n        taskTitle: inputRefDes.current.value,\n        status: true,\n      };\n      post(newData);\n      setSortedList(sortedList.concat(newData));\n      inputRefTitle.current.value = \"\";\n      inputRefDes.current.value = \"\";\n    }\n  };\n\n  /* change opacity for the dragged item. \n    remember the source item for the drop later */\n  const handleDragStart = (event) => {\n    event.target.style.opacity = 0.5;\n    sourceElement = event.target;\n    event.dataTransfer.effectAllowed = \"move\";\n  };\n\n  /* do not trigger default event of item while passing (e.g. a link) */\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n  };\n\n  /* add class .over while hovering other items */\n  const handleDragEnter = (event) => {\n    event.target.classList.add(\"over\");\n  };\n\n  /* remove class .over when not hovering over an item anymore*/\n  const handleDragLeave = (event) => {\n    event.target.classList.remove(\"over\");\n  };\n\n  const handleDrop = (event) => {\n    /* prevent redirect in some browsers*/\n    event.stopPropagation();\n\n    /* only do something if the dropped on item is \n      different to the dragged item*/\n    if (sourceElement !== event.target) {\n      /* remove dragged item from list */\n      const list = sortedList.filter(\n        (item, i) => i.toString() !== sourceElement.id\n      );\n\n      /* this is the removed item */\n      const removed = sortedList.filter(\n        (item, i) => i.toString() === sourceElement.id\n      )[0];\n\n      /* insert removed item after this number. */\n      let insertAt = Number(event.target.id);\n\n      // console.log(\"list with item removed\", list);\n      // console.log(\"removed:  line\", removed);\n      // console.log(\"insertAt index\", insertAt);\n\n      let tempList = [];\n\n      /* if dropped at last item, don't increase target id by +1. \n           max-index is arr.length */\n      if (insertAt >= list.length) {\n        tempList = list.slice(0).concat(removed);\n        setSortedList(tempList);\n        event.target.classList.remove(\"over\");\n      } else if (insertAt < list.length) {\n        /* original list without removed item until the index it was removed at */\n        tempList = list.slice(0, insertAt).concat(removed);\n\n        // console.log(\"tempList\", tempList);\n        // console.log(\"insert the rest: \", list.slice(insertAt));\n\n        /* add the remaining items to the list */\n        const newList = tempList.concat(list.slice(insertAt));\n        // console.log(\"newList\", newList);\n\n        /* set state to display on page */\n        setSortedList(newList);\n        event.target.classList.remove(\"over\");\n        // dispatch(setData(sortedList));\n      }\n    } else console.log(\"nothing happened\");\n    event.target.classList.remove(\"over\");\n  };\n\n  const handleDragEnd = (event) => {\n    event.target.style.opacity = 1;\n  };\n\n  // changes in current input field\n  // const handleChange = (event) => {\n  //   event.preventDefault();\n\n  //   const list = sortedList.map((item, i) => {\n  //     if (i !== Number(event.target.id)) {\n  //       return item;\n  //     } else return event.target.value;\n  //   });\n  //   setSortedList(list);\n  // };\n\n  // filter list only items with id unequal to current id\n  const handleDelete = (event) => {\n    event.preventDefault();\n    const list = sortedList.filter((item, i) => i !== Number(event.target.id));\n    // console.log(event.target.id);\n    setSortedList(list);\n  };\n  // striking function\n  function strikeThrough(text) {\n    return text\n      .split(\"\")\n      .map((char) => char + \"\\u0336\")\n      .join(\"\");\n  }\n  //working with server dataTransfer\n  async function post(newdata) {\n    try {\n      let res = await fetch(\n        \"http://6146ecde65467e00173849b9.mockapi.io/todoApi/task\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newdata),\n        }\n      );\n      dispatch(getData());\n      console.log(res);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function put(newdata, id) {\n    try {\n      let res = await fetch(\n        \"http://6146ecde65467e00173849b9.mockapi.io/todoApi/task/\" + id,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ status: newdata }),\n        }\n      );\n      console.log(res);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function removedata(id) {\n    try {\n      let res = await fetch(\n        \"http://6146ecde65467e00173849b9.mockapi.io/todoApi/task/\" + id,\n        {\n          method: \"DELETE\",\n        }\n      );\n      console.log(res);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function todoSort(s) {\n    switch (s) {\n      case \"all\":\n        {\n          const t = [];\n          myState.forEach((item) => {\n            item.forEach((i) => {\n              if (i.status === true) {\n                t.unshift(i);\n              } else {\n                t.push(i);\n              }\n            });\n          });\n          setSortedList(t);\n        }\n\n        break;\n      case \"completed\":\n        {\n          const t = [];\n          myState.forEach((item) => {\n            item.forEach((i) => {\n              if (i.status === false) {\n                t.push(i);\n              }\n            });\n          });\n          setSortedList(t);\n        }\n\n        break;\n      case \"uncompleted\":\n        {\n          const t = [];\n          myState.forEach((item) => {\n            item.forEach((i) => {\n              if (i.status === true) {\n                t.push(i);\n              }\n            });\n          });\n          setSortedList(t);\n        }\n\n        break;\n\n    }\n  }\n\n  // create list of items \n  const listItems = () => {\n    return sortedList.map((item, i) => (\n      <div key={i} className=\"todo-list\">\n        <input\n          className=\"radio\"\n          type=\"radio\"\n          value={item.status}\n          onClick={() => {\n            item.status = false;\n            put(false, item.id);\n            strikeThrough(item.taskDescription);\n            dispatch(setData(sortedList));\n          }}\n        />\n        <li\n          id={i}\n          type=\"text\"\n          className=\"input-item\"\n          draggable=\"true\"\n          onDragStart={handleDragStart}\n          onDragOver={handleDragOver}\n          onDragEnter={handleDragEnter}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onDragEnd={handleDragEnd}\n          // onChange={handleChange}\n          value={item.taskDescription}\n        >\n          {(() => {\n            if (item.status === false) {\n              return strikeThrough(\n                item.taskDescription + \" :- \" + item.taskTitle\n              );\n            } else {\n              return item.taskDescription + \" :- \" + item.taskTitle;\n            }\n          })()}\n        </li>\n        {/* /> */}\n        <div\n          id={i}\n          className=\"delButton\"\n          onClick={(e) => {\n            handleDelete(e);\n            removedata(item.id);\n            // dispatch(getData());\n          }}\n        >\n          X\n        </div>\n      </div>\n    ));\n  };\n\n  // console.log(\"sorted\", sortedList);\n\n  return (\n    <div className=\"container\">\n      <h1 style={{ color: \"white\", textAlign: \"center\" }}>Todo-List</h1>\n      <div id=\"setInput\" className=\"form-group\">\n        <label\n          style={{ color: \"white\", fontWeight: \"bolder\" }}\n          htmlFor=\"formGroupExampleInput\"\n        >\n          SET TITLE\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"formGroupExampleInput\"\n          ref={inputRefTitle}\n        />\n        <label\n          style={{ color: \"white\", fontWeight: \"bolder\" }}\n          htmlFor=\"formGroupExampleInput\"\n        >\n          SET DESCRIPTION\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"formGroupExampleInput\"\n          ref={inputRefDes}\n        />\n        <button\n          id=\"addbutton\"\n          className=\"addButton\"\n          onClick={() => {\n            newLine();\n          }}\n        >\n          ADD\n        </button>\n      </div>\n      <select id=\"sort\" onClick={(e) => setsort(e.target.value)}>\n        <option id=\"t\" value=\"all\">all</option>\n        <option value=\"completed\">completed</option>\n        <option value=\"uncompleted\">uncompleted</option>\n      </select>\n      {listItems()}\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getData } from \"./actions\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getData());\n  }, [dispatch]);\n\n  // const myState = useSelector((state) => state)\n  // console.log(\"TESTING\",myState);\n  return (\n    <div className=\"App\">\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","const todoDataReducer = (state = [], action) => {\n    switch (action.type) {\n      case \"SET_DATA\":\n        return [action.data];\n      \n        case \"ADD_DATA\":\n        return state;\n  \n      default:\n        return state;\n    }\n  };\n  export default todoDataReducer;\n  ","import todoDataReducer from \"./reducer\";\nimport { combineReducers } from \"redux\";\nconst rootReducer = combineReducers({todoDataReducer})\nexport default rootReducer","import axios from 'axios'\nexport function requestGetData() {\n    return axios.request({\n        method: \"get\",\n        url:\"http://6146ecde65467e00173849b9.mockapi.io/todoApi/task\"\n    })\n} ","import { call, put } from \"@redux-saga/core/effects\";\nimport { requestGetData } from \"../requests/todoData\";\nimport { setData } from \"../../actions\";\nexport function* handleGetData(action) {\n  try {\n    const response = yield call(requestGetData);\n    const data = response;\n    // console.log(\"FROMSAGA\",data.data);\n    yield put(setData(data.data));\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { takeLatest } from \"redux-saga/effects\"\nimport { handleGetData } from \"./handlers/todoData\"\nexport function* watcherSaga() {\n    yield takeLatest(\"GET_DATA\",handleGetData)\n}","import rootReducer from \"./reducers/index\";\nimport createSagaMiddleware from \"redux-saga\"\nimport { createStore,applyMiddleware } from \"redux\";\nimport { watcherSaga } from \"./sagas/rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware()\nconst middleware=[sagaMiddleware]\nconst store = createStore(rootReducer, {}, applyMiddleware(...middleware));\nsagaMiddleware.run(watcherSaga)\nexport default store\n\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n// store.subscribe(() => console.log(store.getState()));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}